(()=>{"use strict";var e={426:(e,t,n)=>{n.d(t,{Z:()=>s});var r=n(537),i=n.n(r),a=n(645),o=n.n(a)()(i());o.push([e.id,"* {\n    padding: 0;\n    margin: 0;\n}\n.main {\n    background-color: slateblue;\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    grid-template-rows: 1fr 5fr;\n}.inputContainer {\n    grid-column: 1/3;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n.mainContainer {\n    grid-row: 2/3;\n    grid-column: 1/2;\n}\n.detailContainer {\n    grid-row: 2/3;\n    grid-column: 2/3;\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    grid-template-rows: repeat(5, 1fr);\n}\n.detailContainer > div {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,UAAU;IACV,SAAS;AACb;AACA;IACI,2BAA2B;IAC3B,aAAa;IACb,8BAA8B;IAC9B,2BAA2B;AAC/B,CAAC;IACG,gBAAgB;IAChB,aAAa;IACb,uBAAuB;IACvB,mBAAmB;AACvB;AACA;IACI,aAAa;IACb,gBAAgB;AACpB;AACA;IACI,aAAa;IACb,gBAAgB;IAChB,aAAa;IACb,8BAA8B;IAC9B,kCAAkC;AACtC;AACA;IACI,aAAa;IACb,sBAAsB;IACtB,uBAAuB;IACvB,mBAAmB;AACvB",sourcesContent:["* {\n    padding: 0;\n    margin: 0;\n}\n.main {\n    background-color: slateblue;\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    grid-template-rows: 1fr 5fr;\n}.inputContainer {\n    grid-column: 1/3;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n.mainContainer {\n    grid-row: 2/3;\n    grid-column: 1/2;\n}\n.detailContainer {\n    grid-row: 2/3;\n    grid-column: 2/3;\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    grid-template-rows: repeat(5, 1fr);\n}\n.detailContainer > div {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n}"],sourceRoot:""}]);const s=o},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,i,a){"string"==typeof e&&(e=[[null,e,void 0]]);var o={};if(r)for(var s=0;s<this.length;s++){var c=this[s][0];null!=c&&(o[c]=!0)}for(var l=0;l<e.length;l++){var d=[].concat(e[l]);r&&o[d[0]]||(void 0!==a&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=a),n&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=n):d[2]=n),i&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=i):d[4]="".concat(i)),t.push(d))}},t}},537:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),i="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(i," */"),o=n.sources.map((function(e){return"/*# sourceURL=".concat(n.sourceRoot||"").concat(e," */")}));return[t].concat(o).concat([a]).join("\n")}return[t].join("\n")}},174:(e,t,n)=>{function r(e,t){if(t.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+t.length+" present")}function i(e){r(1,arguments);var t=Object.prototype.toString.call(e);return e instanceof Date||"object"==typeof e&&"[object Date]"===t?new Date(e.getTime()):"number"==typeof e||"[object Number]"===t?new Date(e):("string"!=typeof e&&"[object String]"!==t||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}function a(e){if(null===e||!0===e||!1===e)return NaN;var t=Number(e);return isNaN(t)?t:t<0?Math.ceil(t):Math.floor(t)}function o(e){r(1,arguments);var t=a(e);return i(1e3*t)}n.d(t,{Z:()=>o})},379:e=>{var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var a={},o=[],s=0;s<e.length;s++){var c=e[s],l=r.base?c[0]+r.base:c[0],d=a[l]||0,p="".concat(l," ").concat(d);a[l]=d+1;var u=n(p),h={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==u)t[u].references++,t[u].updater(h);else{var m=i(h,r);r.byIndex=s,t.splice(s,0,{identifier:p,updater:m,references:1})}o.push(p)}return o}function i(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,i){var a=r(e=e||[],i=i||{});return function(e){e=e||[];for(var o=0;o<a.length;o++){var s=n(a[o]);t[s].references--}for(var c=r(e,i),l=0;l<a.length;l++){var d=n(a[l]);0===t[d].references&&(t[d].updater(),t.splice(d,1))}a=c}}},569:e=>{var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var i=void 0!==n.layer;i&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,i&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var a=n.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},672:(e,t,n)=>{n.d(t,{Z:()=>s});var r=n(923);const i=n.p+"e5b06e192f6d2362c54f.svg",a=(0,r.az)("div",{class:"detailContainer"}),o=(()=>{const e=(e,t)=>{const n=(0,r.az)("div",{class:"detailDiv"}),i=(0,r.az)("div",{class:"detailLabel"}),a=(0,r.az)("div",{class:"detailData"});return i.textContent=`${e}`,a.textContent=`${t}`,n.appendChild(i),n.appendChild(a),n};return{windFn:t=>{const n=e("WIND",`${t.speed} mph`),a=(0,r.az)("img",{class:"windIcon"});return a.src=i,a.style.transform=`rotate(${t.deg}deg)`,a.alt=`Wind direction: ${t.deg}`,n.insertBefore(a,n.children[1]),n},visFn:t=>e("VISIBILITY",t/1e3+" mi"),humidFn:t=>e("HUMIDITY",`${t} %`),feelsFn:(t,n)=>{const i=e("FEELS LIKE",""),a=(0,r.az)("div",{id:"temp",class:`${n.feelsLike.far} ${n.feelsLike.cel}`});return a.textContent=`${t}`,i.children[1].appendChild(a),i},popFn:t=>{const n=e("PRECIPITATION",`${Math.round(100*t)} %`),i=(0,r.az)("div",{class:"popLabel"});return i.textContent="CHANCE OF",n.insertBefore(i,n.firstChild),n},precipFn:t=>{let n={"3h":0};void 0!==t&&(n=t);const i=e("ACCUMULATION",`${n["3h"]}mm in last 3h`),a=(0,r.az)("div",{class:"precipLabel"});return a.textContent="PRECIPITATION",i.insertBefore(a,i.firstChild),i},airFn:t=>{const n=e("AIR QUALITY",`${t}`);return n.children[1].setAttribute("id",`quality${t}`),n},pressureFn:t=>e("PRESSURE",`${t} hPa`),sunriseFn:t=>e("SUNRISE",`${t}`),sunsetFn:t=>e("SUNSET",`${t}`)}})(),s=(e,t)=>{const n=(0,r.bq)(t);return a.appendChild(o.windFn(e.wind)),a.appendChild(o.visFn(e.visibility)),a.appendChild(o.feelsFn(e.feelsLike[n],e)),a.appendChild(o.humidFn(e.humidity)),a.appendChild(o.popFn(e.pop)),a.appendChild(o.precipFn(e.precip)),a.appendChild(o.airFn(e.airQuality)),a.appendChild(o.pressureFn(e.pressure)),a.appendChild(o.sunriseFn(e.sunrise)),a.appendChild(o.sunsetFn(e.sunset)),a}},715:(e,t,n)=>{n.d(t,{Z:()=>a});var r=n(923);const i=(()=>{const e=(0,r.az)("div",{class:"forecastContainer"});return{forecast:(t,n,i)=>{const a=Object.keys(t).length,o=[];for(let e=0;e<a;e+=1)o[e]=t[e];let s=0;return o.forEach((t=>{const a=(0,r.az)("div",{class:`card${s}`});((e,t,n,i)=>{Object.keys(t).forEach((a=>{const o=(0,r.az)("div",{class:"forecastBlock"});n.appendChild(o),o.appendChild(((e,t)=>{const n=(0,r.XV)(t.dt,e.timezone),i=(0,r.az)("div",{class:"timeDiv"});return i.textContent=`${(0,r.MH)(n.getHours())}00`,i})(e,t[a])),o.appendChild(((e,t)=>{const n=(0,r.Jn)(e.main.temp),i=(0,r.bq)(t),a=(0,r.az)("div",{class:"tempDiv"}),o=(0,r.az)("div",{id:"temp",class:`${n.far} ${n.cel}`});return o.textContent=`${n[i]}`,a.appendChild(o),a})(t[a],i)),o.appendChild((e=>{const t=(0,r.az)("div",{class:"forecastIconContainer"}),n=(0,r.az)("img",{class:"forecastIcon","aria-label":"Forecast Icon",title:`${e.weather[0].description}`});return n.src=`http://openweathermap.org/img/wn/${e.weather[0].icon}@2x.png`,n.alt=e.weather[0].main,t.appendChild(n),t})(t[a])),o.appendChild((e=>{const t=e.pop,n=(0,r.az)("div",{class:"popDiv"});return n.textContent=`${Math.round(100*t)}%`,n})(t[a]))}))})(n,t,a,i),e.appendChild(a),s+=1})),e}}})(),a=(e,t,n)=>(console.log(e),console.log(t),i.forecast(e,t,n))},916:(e,t,n)=>{n.d(t,{Z:()=>a});var r=n(923);const i=(e,t)=>{const n=(0,r.az)("div",{class:"mainContainer"}),i=(0,r.az)("div",{class:"locationContainer"}),a=(0,r.az)("div",{class:"mainCity"}),o=(0,r.az)("div",{class:"mainCountry"}),s=(0,r.az)("div",{class:"mainTempContainer"}),c=(0,r.az)("div",{id:"temp",class:`${e.temp.far} ${e.temp.cel}`}),l=(0,r.az)("div",{class:"highlowContainer"}),d=(0,r.az)("div",{id:"temp",class:`${e.high.far} ${e.high.cel}`}),p=(0,r.az)("div",{id:"temp",class:`${e.low.far} ${e.low.cel}`}),u=(0,r.az)("div",{class:"iconContainer"}),h=(0,r.az)("img",{class:"mainWeatherIcon","aria-label":"Weather Icon"});h.src=`http://openweathermap.org/img/wn/${e.icon}@4x.png`,h.alt=`${e.description}`;const m=(0,r.az)("div",{class:"mainDescription"}),f=(0,r.bq)(t);return a.textContent=e.city,o.textContent=e.country,c.textContent=e.temp[f],d.textContent=`${e.high[f]}`,p.textContent=`${e.low[f]}`,m.textContent=e.conditions,n.appendChild(i),i.appendChild(a),i.appendChild(o),n.appendChild(s),s.appendChild(c),n.appendChild(l),l.appendChild(d),l.appendChild(p),n.appendChild(u),u.appendChild(h),u.appendChild(m),n},a=(e,t)=>i(e,t)},389:(e,t,n)=>{n.d(t,{V:()=>i,j:()=>a});const r=(e,t)=>{const n=t.dt_txt,r=new Date(n);return r.setMinutes(r.getMinutes()+e.city.timezone/60),r},i=e=>{const t=r(e,e.list[0]).getDate(),n=e.list,i={0:{},1:{},2:{},3:{},4:{},5:{}};return n.forEach((n=>{const a=r(e,n),o=a.getDate()-t,s=a.getHours();i[o][s]=n})),i},a=e=>{const t=Object.keys(e);let n=e[t[0]].main.temp,r=e[t[0]].main.temp;for(let i=0;i<t.length;i+=1){const{temp:a}=e[t[i]].main;console.log(a),a>n&&(n=a),a<r&&(r=a)}return[n,r]}},923:(e,t,n)=>{n.d(t,{Jn:()=>l,MH:()=>o,XV:()=>a,az:()=>i,bq:()=>d,eJ:()=>c,fW:()=>p});var r=n(174);const i=(e,t)=>{const n=document.createElement(`${e}`);return null==t||((e,t)=>{Object.entries(t).forEach((([t,n])=>{e.setAttribute(t,n)}))})(n,t),n},a=(e,t)=>{const n=(0,r.Z)(e),i=n.getTimezoneOffset();return n.setMinutes(n.getMinutes()+i),n.setMinutes(n.getMinutes()+t/60),n},o=e=>{let t=e;return e<10&&(t=`0${e}`),t},s=e=>{let t=e;return e<10&&(t=`0${e}`),t},c=(e,t)=>{const n=a(e,t);return`${s(n.getHours())}:${s(n.getMinutes())}`},l=e=>({far:Math.round(Number(e)),cel:Math.round((Number(e)-32)*(5/9))}),d=e=>{let t="cel";return!1===e&&(t="far"),t},p=(e,t,n)=>{let r=t,i=n;return e>t&&(r=e),e<n&&(i=n),[r,i]}}},t={};function n(r){var i=t[r];if(void 0!==i)return i.exports;var a=t[r]={id:r,exports:{}};return e[r](a,a.exports,n),a.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{var e;n.g.importScripts&&(e=n.g.location+"");var t=n.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var r=t.getElementsByTagName("script");r.length&&(e=r[r.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),n.p=e})(),n.nc=void 0,(()=>{var e=n(379),t=n.n(e),r=n(795),i=n.n(r),a=n(569),o=n.n(a),s=n(565),c=n.n(s),l=n(216),d=n.n(l),p=n(589),u=n.n(p),h=n(426),m={};m.styleTagTransform=u(),m.setAttributes=c(),m.insert=o().bind(null,"head"),m.domAPI=i(),m.insertStyleElement=d(),t()(h.Z,m),h.Z&&h.Z.locals&&h.Z.locals;var f=n(923),C=n(672),g=n(916),v=n(389),A=n(715);const y=(()=>{const e="917a17f77a60ae96ee081212e94e3f75",t=e=>{for(;e.firstChild;)e.removeChild(e.firstChild)};return{mainFn:async(n,r,i)=>{try{const a=await(async t=>{const n=t,r=await fetch(`https://api.openweathermap.org/data/2.5/forecast?q=${n}&appid=${e}&units=imperial`,{mode:"cors"});return await r.json()})(n);if((e=>{let t="";return"200"!==e.cod?(t=!1,(e=>{const t=document.querySelector("div.inputContainer");if("404"===e.cod){const e=(0,f.az)("div",{class:"errorDisplay"});e.textContent="Location not found!",t.appendChild(e)}})(e)):t=!0,t})(a)){const o=(0,v.V)(a),s=(0,v.j)(o[0]),c=await(async t=>{const n=await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${t}&appid=${e}&units=imperial`,{mode:"cors"});return await n.json()})(n),l=await(async(t,n)=>{const r=await fetch(`http://api.openweathermap.org/data/2.5/air_pollution?lat=${t}&lon=${n}&appid=${e}`,{mode:"cors"});return await r.json()})(a.city.coord.lat,a.city.coord.lon);Promise.all([a,c,l]).then((e=>{const n=(([e,t,n],r)=>{console.log([e,t,n]);const i=t.name,a=`${t.coord.lat}, ${t.coord.lon}`,o=(0,f.Jn)(t.main.temp),s=(0,f.fW)(o,r[0],r[1]),c=(0,f.Jn)(s[0]),l=(0,f.Jn)(s[1]),d=t.weather[0].main,{description:p}=t.weather[0],{icon:u}=t.weather[0],{wind:h}=e.list[0],{pop:m}=e.list[0],{timezone:C}=e.city,g=(0,f.eJ)(e.city.sunrise,C),v=(0,f.eJ)(e.city.sunset,C),{humidity:A}=e.list[0].main,y=(0,f.Jn)(e.list[0].main.feels_like),{visibility:b}=e.list[0],w=e.list[0].rain,I=n.list[0].main.aqi,{pressure:$}=e.list[0].main;return{city:i,gps:a,temp:o,high:c,low:l,conditions:d,description:p,icon:u,wind:h,pop:m,sunrise:g,sunset:v,timezone:C,humidity:A,feelsLike:y,visibility:b,precip:w,airQuality:I,pressure:$}})(e,s);console.log(n),(e=>{console.log(e.children.length);for(let n=1;n<e.children.length;n+=0)console.log(e.children[0].nextElementSibling),t(e.children[0].nextElementSibling),e.removeChild(e.children[0].nextElementSibling)})(i);const a=(0,C.Z)(n,r);i.appendChild(a);const c=(0,g.Z)(n,r);i.appendChild(c);const l=(0,A.Z)(o,n,r);i.appendChild(l)})).catch((e=>{alert("Apologies! The site experienced an error, check the log for details."),console.log(e)}))}else console.log(`Apologies! The site experienced an error: "${a.message}".`)}catch(e){alert("Apologies! The site experienced an error, check the log for details."),console.log(e)}}}})(),b=(()=>{const e=()=>{const e=(0,f.az)("div",{class:"tempBtnContainer"}),t=(0,f.az)("div",{class:"tempToggle"});return t.textContent="°F",e.appendChild(t),e},t=e=>{const t=Array.from(document.querySelectorAll("div#temp"));void 0!==t&&t.forEach((t=>{const n=Array.from(t.classList);t.textContent=n[e]}))};let n=!1;return{initial:()=>{const t=(0,f.az)("div",{class:"main"}),n=(0,f.az)("div",{class:"inputContainer"}),r=(0,f.az)("input",{class:"inputField",id:"inputField","aria-label":"Input Location",title:"Format as: 'City', 'City, State', OR 'City, Country'",placeholder:"Search location..."}),i=(0,f.az)("button",{class:"submitBtn","aria-label":"Submit"});return i.textContent="Search",n.appendChild(r),n.appendChild(i),n.appendChild(e()),t.appendChild(n),t},temp:e,submitFn:(e,t)=>{const r=e.value;y.mainFn(r,n,t),e.value=""},toggleFn:e=>{n?(e.textContent="°F",t(0)):(e.textContent="°C",t(1)),n=!n}}})();document.querySelector("body").appendChild((()=>{const e=b.initial(),t=e.children[0].children[0],n=e.children[0].children[1],r=e.children[0].children[2];return n.addEventListener("click",(()=>{b.submitFn(t,e)})),r.addEventListener("click",(()=>{b.toggleFn(r)})),e})())})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,