(()=>{"use strict";var n={426:(n,e,t)=>{t.d(e,{Z:()=>s});var r=t(537),i=t.n(r),a=t(645),o=t.n(a)()(i());o.push([n.id,'* {\n    padding: 0;\n    margin: 0;\n}\n.main {\n    background-color: #3d5a80;\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    grid-template-rows: 1fr 5fr;\n    height: 100vh;\n    width: 100vw;\n}\n.inputContainer {\n    grid-column: 1/3;\n    display: grid;\n    /* justify-content: center;\n    align-items: center; */\n    grid-template-columns: 1fr 3fr 1fr;\n    background-color: #3d5a80;\n}\n.inputSearch {\n    grid-column: 2/3;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n.inputField {\n    width: 200px;\n    height: 50px;\n    background-color: #e0fbfc;\n    border: 2px solid #293241;\n    border-radius: 5px;\n    padding: 0 10px;\n    margin: 10px;\n}\n.submitBtn {\n    height: 54px;\n    background-color: #e0fbfc;\n    border: 2px solid #293241;\n    border-radius: 5px;\n}\n.submitBtn > img {\n    color: #293241;\n}\n.searchIcon {\n    height: inherit;\n}\n.tempBtnContainer {\n    grid-column: 3/4;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n.tempToggle {\n    width: 100px;\n    height: 25px;\n    border-radius: 50px;\n    background-color: red;\n    padding: 7px 16px 0 16px;\n    display: block;\n    position: relative;\n    text-align: end;\n    cursor: pointer;\n    /* transition-duration: 1s; */\n    box-shadow: 0 0 3px #fff, 0 0 5px #fff, 0 0 7px #fff, 0 0 11px rgb(250, 39, 1), 0 0 15px rgb(243, 51, 17), 0 0 19px rgb(248, 61, 29), 0 0 27px rgb(245, 113, 90), 0 0 31px rgb(247, 167, 153);\n}\n#far {\n    transition-duration: 1s;\n    text-align: start;\n    background-color: green;\n    box-shadow: 0 0 3px #fff, 0 0 5px #fff, 0 0 7px #fff, 0 0 11px rgb(12, 133, 1), 0 0 15px rgb(38, 150, 11), 0 0 19px rgb(30, 204, 44), 0 0 27px rgb(70, 236, 78), 0 0 31px rgb(156, 243, 153);\n}\n.tempToggle::after {\n    content: "";\n    width: 28px;\n    height: 28px;\n    background-color: #e8f5f7;\n    position: absolute;\n    border-radius: 14px;\n    top: 2px;\n    left: 5px;\n    transition-duration: 0.5s;\n}\n#far::after {\n    left: calc(100% - 5px);\n    transform: translateX(-100%);\n}\n.tempToggle:active::after {\n    width: 32px;\n}\n.mainContainer {\n    grid-row: 2/3;\n    grid-column: 1/2;\n}\n.detailContainer {\n    grid-row: 2/3;\n    grid-column: 2/3;\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    grid-template-rows: repeat(5, 1fr);\n}\n.detailContainer > div {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n}',"",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,UAAU;IACV,SAAS;AACb;AACA;IACI,yBAAyB;IACzB,aAAa;IACb,8BAA8B;IAC9B,2BAA2B;IAC3B,aAAa;IACb,YAAY;AAChB;AACA;IACI,gBAAgB;IAChB,aAAa;IACb;0BACsB;IACtB,kCAAkC;IAClC,yBAAyB;AAC7B;AACA;IACI,gBAAgB;IAChB,aAAa;IACb,uBAAuB;IACvB,mBAAmB;AACvB;AACA;IACI,YAAY;IACZ,YAAY;IACZ,yBAAyB;IACzB,yBAAyB;IACzB,kBAAkB;IAClB,eAAe;IACf,YAAY;AAChB;AACA;IACI,YAAY;IACZ,yBAAyB;IACzB,yBAAyB;IACzB,kBAAkB;AACtB;AACA;IACI,cAAc;AAClB;AACA;IACI,eAAe;AACnB;AACA;IACI,gBAAgB;IAChB,aAAa;IACb,uBAAuB;IACvB,mBAAmB;AACvB;AACA;IACI,YAAY;IACZ,YAAY;IACZ,mBAAmB;IACnB,qBAAqB;IACrB,wBAAwB;IACxB,cAAc;IACd,kBAAkB;IAClB,eAAe;IACf,eAAe;IACf,6BAA6B;IAC7B,6LAA6L;AACjM;AACA;IACI,uBAAuB;IACvB,iBAAiB;IACjB,uBAAuB;IACvB,4LAA4L;AAChM;AACA;IACI,WAAW;IACX,WAAW;IACX,YAAY;IACZ,yBAAyB;IACzB,kBAAkB;IAClB,mBAAmB;IACnB,QAAQ;IACR,SAAS;IACT,yBAAyB;AAC7B;AACA;IACI,sBAAsB;IACtB,4BAA4B;AAChC;AACA;IACI,WAAW;AACf;AACA;IACI,aAAa;IACb,gBAAgB;AACpB;AACA;IACI,aAAa;IACb,gBAAgB;IAChB,aAAa;IACb,8BAA8B;IAC9B,kCAAkC;AACtC;AACA;IACI,aAAa;IACb,sBAAsB;IACtB,uBAAuB;IACvB,mBAAmB;AACvB",sourcesContent:['* {\n    padding: 0;\n    margin: 0;\n}\n.main {\n    background-color: #3d5a80;\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    grid-template-rows: 1fr 5fr;\n    height: 100vh;\n    width: 100vw;\n}\n.inputContainer {\n    grid-column: 1/3;\n    display: grid;\n    /* justify-content: center;\n    align-items: center; */\n    grid-template-columns: 1fr 3fr 1fr;\n    background-color: #3d5a80;\n}\n.inputSearch {\n    grid-column: 2/3;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n.inputField {\n    width: 200px;\n    height: 50px;\n    background-color: #e0fbfc;\n    border: 2px solid #293241;\n    border-radius: 5px;\n    padding: 0 10px;\n    margin: 10px;\n}\n.submitBtn {\n    height: 54px;\n    background-color: #e0fbfc;\n    border: 2px solid #293241;\n    border-radius: 5px;\n}\n.submitBtn > img {\n    color: #293241;\n}\n.searchIcon {\n    height: inherit;\n}\n.tempBtnContainer {\n    grid-column: 3/4;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n.tempToggle {\n    width: 100px;\n    height: 25px;\n    border-radius: 50px;\n    background-color: red;\n    padding: 7px 16px 0 16px;\n    display: block;\n    position: relative;\n    text-align: end;\n    cursor: pointer;\n    /* transition-duration: 1s; */\n    box-shadow: 0 0 3px #fff, 0 0 5px #fff, 0 0 7px #fff, 0 0 11px rgb(250, 39, 1), 0 0 15px rgb(243, 51, 17), 0 0 19px rgb(248, 61, 29), 0 0 27px rgb(245, 113, 90), 0 0 31px rgb(247, 167, 153);\n}\n#far {\n    transition-duration: 1s;\n    text-align: start;\n    background-color: green;\n    box-shadow: 0 0 3px #fff, 0 0 5px #fff, 0 0 7px #fff, 0 0 11px rgb(12, 133, 1), 0 0 15px rgb(38, 150, 11), 0 0 19px rgb(30, 204, 44), 0 0 27px rgb(70, 236, 78), 0 0 31px rgb(156, 243, 153);\n}\n.tempToggle::after {\n    content: "";\n    width: 28px;\n    height: 28px;\n    background-color: #e8f5f7;\n    position: absolute;\n    border-radius: 14px;\n    top: 2px;\n    left: 5px;\n    transition-duration: 0.5s;\n}\n#far::after {\n    left: calc(100% - 5px);\n    transform: translateX(-100%);\n}\n.tempToggle:active::after {\n    width: 32px;\n}\n.mainContainer {\n    grid-row: 2/3;\n    grid-column: 1/2;\n}\n.detailContainer {\n    grid-row: 2/3;\n    grid-column: 2/3;\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    grid-template-rows: repeat(5, 1fr);\n}\n.detailContainer > div {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n}'],sourceRoot:""}]);const s=o},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",r=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),r&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),r&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,r,i,a){"string"==typeof n&&(n=[[null,n,void 0]]);var o={};if(r)for(var s=0;s<this.length;s++){var c=this[s][0];null!=c&&(o[c]=!0)}for(var l=0;l<n.length;l++){var d=[].concat(n[l]);r&&o[d[0]]||(void 0!==a&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=a),t&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=t):d[2]=t),i&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=i):d[4]="".concat(i)),e.push(d))}},e}},537:n=>{n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),i="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(i," */"),o=t.sources.map((function(n){return"/*# sourceURL=".concat(t.sourceRoot||"").concat(n," */")}));return[e].concat(o).concat([a]).join("\n")}return[e].join("\n")}},174:(n,e,t)=>{function r(n,e){if(e.length<n)throw new TypeError(n+" argument"+(n>1?"s":"")+" required, but only "+e.length+" present")}function i(n){r(1,arguments);var e=Object.prototype.toString.call(n);return n instanceof Date||"object"==typeof n&&"[object Date]"===e?new Date(n.getTime()):"number"==typeof n||"[object Number]"===e?new Date(n):("string"!=typeof n&&"[object String]"!==e||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}function a(n){if(null===n||!0===n||!1===n)return NaN;var e=Number(n);return isNaN(e)?e:e<0?Math.ceil(e):Math.floor(e)}function o(n){r(1,arguments);var e=a(n);return i(1e3*e)}t.d(e,{Z:()=>o})},379:n=>{var e=[];function t(n){for(var t=-1,r=0;r<e.length;r++)if(e[r].identifier===n){t=r;break}return t}function r(n,r){for(var a={},o=[],s=0;s<n.length;s++){var c=n[s],l=r.base?c[0]+r.base:c[0],d=a[l]||0,p="".concat(l," ").concat(d);a[l]=d+1;var A=t(p),u={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==A)e[A].references++,e[A].updater(u);else{var f=i(u,r);r.byIndex=s,e.splice(s,0,{identifier:p,updater:f,references:1})}o.push(p)}return o}function i(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,i){var a=r(n=n||[],i=i||{});return function(n){n=n||[];for(var o=0;o<a.length;o++){var s=t(a[o]);e[s].references--}for(var c=r(n,i),l=0;l<a.length;l++){var d=t(a[l]);0===e[d].references&&(e[d].updater(),e.splice(d,1))}a=c}}},569:n=>{var e={};n.exports=function(n,t){var r=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},565:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},795:n=>{n.exports=function(n){var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var i=void 0!==t.layer;i&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,i&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var a=t.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleTagTransform(r,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}},672:(n,e,t)=>{t.d(e,{Z:()=>s});var r=t(923);const i=t.p+"e5b06e192f6d2362c54f.svg",a=(0,r.az)("div",{class:"detailContainer"}),o=(()=>{const n=(n,e)=>{const t=(0,r.az)("div",{class:"detailDiv"}),i=(0,r.az)("div",{class:"detailLabel"}),a=(0,r.az)("div",{class:"detailData"});return i.textContent=`${n}`,a.textContent=`${e}`,t.appendChild(i),t.appendChild(a),t};return{windFn:e=>{const t=n("WIND",`${e.speed} mph`),a=(0,r.az)("img",{class:"windIcon"});return a.src=i,a.style.transform=`rotate(${e.deg}deg)`,a.alt=`Wind direction: ${e.deg}`,t.insertBefore(a,t.children[1]),t},visFn:e=>n("VISIBILITY",e/1e3+" mi"),humidFn:e=>n("HUMIDITY",`${e} %`),feelsFn:(e,t)=>{const i=n("FEELS LIKE",""),a=(0,r.az)("div",{id:"temp",class:`${t.feelsLike.far} ${t.feelsLike.cel}`});return a.textContent=`${e}`,i.children[1].appendChild(a),i},popFn:e=>{const t=n("PRECIPITATION",`${Math.round(100*e)} %`),i=(0,r.az)("div",{class:"popLabel"});return i.textContent="CHANCE OF",t.insertBefore(i,t.firstChild),t},precipFn:e=>{let t={"3h":0};void 0!==e&&(t=e);const i=n("ACCUMULATION",`${t["3h"]}mm in last 3h`),a=(0,r.az)("div",{class:"precipLabel"});return a.textContent="PRECIPITATION",i.insertBefore(a,i.firstChild),i},airFn:e=>{const t=n("AIR QUALITY",`${e}`);return t.children[1].setAttribute("id",`quality${e}`),t},pressureFn:e=>n("PRESSURE",`${e} hPa`),sunriseFn:e=>n("SUNRISE",`${e}`),sunsetFn:e=>n("SUNSET",`${e}`)}})(),s=(n,e)=>{const t=(0,r.bq)(e);return a.appendChild(o.windFn(n.wind)),a.appendChild(o.visFn(n.visibility)),a.appendChild(o.feelsFn(n.feelsLike[t],n)),a.appendChild(o.humidFn(n.humidity)),a.appendChild(o.popFn(n.pop)),a.appendChild(o.precipFn(n.precip)),a.appendChild(o.airFn(n.airQuality)),a.appendChild(o.pressureFn(n.pressure)),a.appendChild(o.sunriseFn(n.sunrise)),a.appendChild(o.sunsetFn(n.sunset)),a}},715:(n,e,t)=>{t.d(e,{Z:()=>a});var r=t(923);const i=(()=>{const n=(0,r.az)("div",{class:"forecastContainer"});return{forecast:(e,t,i)=>{const a=Object.keys(e).length,o=[];for(let n=0;n<a;n+=1)o[n]=e[n];let s=0;return o.forEach((e=>{const a=(0,r.az)("div",{class:`card${s}`});((n,e,t,i)=>{Object.keys(e).forEach((a=>{const o=(0,r.az)("div",{class:"forecastBlock"});t.appendChild(o),o.appendChild(((n,e)=>{const t=(0,r.XV)(e.dt,n.timezone),i=(0,r.az)("div",{class:"timeDiv"});return i.textContent=`${(0,r.MH)(t.getHours())}00`,i})(n,e[a])),o.appendChild(((n,e)=>{const t=(0,r.Jn)(n.main.temp),i=(0,r.bq)(e),a=(0,r.az)("div",{class:"tempDiv"}),o=(0,r.az)("div",{id:"temp",class:`${t.far} ${t.cel}`});return o.textContent=`${t[i]}`,a.appendChild(o),a})(e[a],i)),o.appendChild((n=>{const e=(0,r.az)("div",{class:"forecastIconContainer"}),t=(0,r.az)("img",{class:"forecastIcon","aria-label":"Forecast Icon",title:`${n.weather[0].description}`});return t.src=`http://openweathermap.org/img/wn/${n.weather[0].icon}@2x.png`,t.alt=n.weather[0].main,e.appendChild(t),e})(e[a])),o.appendChild((n=>{const e=n.pop,t=(0,r.az)("div",{class:"popDiv"});return t.textContent=`${Math.round(100*e)}%`,t})(e[a]))}))})(t,e,a,i),n.appendChild(a),s+=1})),n}}})(),a=(n,e,t)=>(console.log(n),console.log(e),i.forecast(n,e,t))},916:(n,e,t)=>{t.d(e,{Z:()=>a});var r=t(923);const i=(n,e)=>{const t=(0,r.az)("div",{class:"mainContainer"}),i=(0,r.az)("div",{class:"locationContainer"}),a=(0,r.az)("div",{class:"mainCity"}),o=(0,r.az)("div",{class:"mainCountry"}),s=(0,r.az)("div",{class:"mainTempContainer"}),c=(0,r.az)("div",{id:"temp",class:`${n.temp.far} ${n.temp.cel}`}),l=(0,r.az)("div",{class:"highlowContainer"}),d=(0,r.az)("div",{id:"temp",class:`${n.high.far} ${n.high.cel}`}),p=(0,r.az)("div",{id:"temp",class:`${n.low.far} ${n.low.cel}`}),A=(0,r.az)("div",{class:"iconContainer"}),u=(0,r.az)("img",{class:"mainWeatherIcon","aria-label":"Weather Icon"});u.src=`http://openweathermap.org/img/wn/${n.icon}@4x.png`,u.alt=`${n.description}`;const f=(0,r.az)("div",{class:"mainDescription"}),h=(0,r.bq)(e);return a.textContent=n.city,o.textContent=n.country,c.textContent=n.temp[h],d.textContent=`${n.high[h]}`,p.textContent=`${n.low[h]}`,f.textContent=n.conditions,t.appendChild(i),i.appendChild(a),i.appendChild(o),t.appendChild(s),s.appendChild(c),t.appendChild(l),l.appendChild(d),l.appendChild(p),t.appendChild(A),A.appendChild(u),A.appendChild(f),t},a=(n,e)=>i(n,e)},389:(n,e,t)=>{t.d(e,{V:()=>i,j:()=>a});const r=(n,e)=>{const t=e.dt_txt,r=new Date(t);return r.setMinutes(r.getMinutes()+n.city.timezone/60),r},i=n=>{const e=r(n,n.list[0]).getDate(),t=n.list,i={0:{},1:{},2:{},3:{},4:{},5:{}};return t.forEach((t=>{const a=r(n,t),o=a.getDate()-e,s=a.getHours();i[o][s]=t})),i},a=n=>{const e=Object.keys(n);let t=n[e[0]].main.temp,r=n[e[0]].main.temp;for(let i=0;i<e.length;i+=1){const{temp:a}=n[e[i]].main;console.log(a),a>t&&(t=a),a<r&&(r=a)}return[t,r]}},923:(n,e,t)=>{t.d(e,{Jn:()=>l,MH:()=>o,XV:()=>a,az:()=>i,bq:()=>d,eJ:()=>c,fW:()=>p});var r=t(174);const i=(n,e)=>{const t=document.createElement(`${n}`);return null==e||((n,e)=>{Object.entries(e).forEach((([e,t])=>{n.setAttribute(e,t)}))})(t,e),t},a=(n,e)=>{const t=(0,r.Z)(n),i=t.getTimezoneOffset();return t.setMinutes(t.getMinutes()+i),t.setMinutes(t.getMinutes()+e/60),t},o=n=>{let e=n;return n<10&&(e=`0${n}`),e},s=n=>{let e=n;return n<10&&(e=`0${n}`),e},c=(n,e)=>{const t=a(n,e);return`${s(t.getHours())}:${s(t.getMinutes())}`},l=n=>({far:Math.round(Number(n)),cel:Math.round((Number(n)-32)*(5/9))}),d=n=>{let e="cel";return!1===n&&(e="far"),e},p=(n,e,t)=>{let r=e,i=t;return n>e&&(r=n),n<t&&(i=t),[r,i]}}},e={};function t(r){var i=e[r];if(void 0!==i)return i.exports;var a=e[r]={id:r,exports:{}};return n[r](a,a.exports,t),a.exports}t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var r in e)t.o(e,r)&&!t.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:e[r]})},t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(n){if("object"==typeof window)return window}}(),t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),(()=>{var n;t.g.importScripts&&(n=t.g.location+"");var e=t.g.document;if(!n&&e&&(e.currentScript&&(n=e.currentScript.src),!n)){var r=e.getElementsByTagName("script");r.length&&(n=r[r.length-1].src)}if(!n)throw new Error("Automatic publicPath is not supported in this browser");n=n.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=n})(),t.nc=void 0,(()=>{var n=t(379),e=t.n(n),r=t(795),i=t.n(r),a=t(569),o=t.n(a),s=t(565),c=t.n(s),l=t(216),d=t.n(l),p=t(589),A=t.n(p),u=t(426),f={};f.styleTagTransform=A(),f.setAttributes=c(),f.insert=o().bind(null,"head"),f.domAPI=i(),f.insertStyleElement=d(),e()(u.Z,f),u.Z&&u.Z.locals&&u.Z.locals;var h=t(923),g=t(672),C=t(916),m=t(389),b=t(715);const x=(()=>{const n="917a17f77a60ae96ee081212e94e3f75",e=n=>{for(;n.firstChild;)n.removeChild(n.firstChild)};return{mainFn:async(t,r,i)=>{try{const a=await(async e=>{const t=e,r=await fetch(`https://api.openweathermap.org/data/2.5/forecast?q=${t}&appid=${n}&units=imperial`,{mode:"cors"});return await r.json()})(t);if((n=>{let e="";return"200"!==n.cod?(e=!1,(n=>{const e=document.querySelector("div.inputContainer");if("404"===n.cod){const n=(0,h.az)("div",{class:"errorDisplay"});n.textContent="Location not found!",e.appendChild(n)}})(n)):e=!0,e})(a)){const o=(0,m.V)(a),s=(0,m.j)(o[0]),c=await(async e=>{const t=await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${e}&appid=${n}&units=imperial`,{mode:"cors"});return await t.json()})(t),l=await(async(e,t)=>{const r=await fetch(`http://api.openweathermap.org/data/2.5/air_pollution?lat=${e}&lon=${t}&appid=${n}`,{mode:"cors"});return await r.json()})(a.city.coord.lat,a.city.coord.lon);Promise.all([a,c,l]).then((n=>{const t=(([n,e,t],r)=>{console.log([n,e,t]);const i=e.name,a=`${e.coord.lat}, ${e.coord.lon}`,o=(0,h.Jn)(e.main.temp),s=(0,h.fW)(o,r[0],r[1]),c=(0,h.Jn)(s[0]),l=(0,h.Jn)(s[1]),d=e.weather[0].main,{description:p}=e.weather[0],{icon:A}=e.weather[0],{wind:u}=n.list[0],{pop:f}=n.list[0],{timezone:g}=n.city,C=(0,h.eJ)(n.city.sunrise,g),m=(0,h.eJ)(n.city.sunset,g),{humidity:b}=n.list[0].main,x=(0,h.Jn)(n.list[0].main.feels_like),{visibility:v}=n.list[0],B=n.list[0].rain,I=t.list[0].main.aqi,{pressure:y}=n.list[0].main;return{city:i,gps:a,temp:o,high:c,low:l,conditions:d,description:p,icon:A,wind:u,pop:f,sunrise:C,sunset:m,timezone:g,humidity:b,feelsLike:x,visibility:v,precip:B,airQuality:I,pressure:y}})(n,s);console.log(t),(n=>{console.log(n.children.length);for(let t=1;t<n.children.length;t+=0)console.log(n.children[0].nextElementSibling),e(n.children[0].nextElementSibling),n.removeChild(n.children[0].nextElementSibling)})(i);const a=(0,g.Z)(t,r);i.appendChild(a);const c=(0,C.Z)(t,r);i.appendChild(c);const l=(0,b.Z)(o,t,r);i.appendChild(l)})).catch((n=>{alert("Apologies! The site experienced an error, check the log for details."),console.log(n)}))}else console.log(`Apologies! The site experienced an error: "${a.message}".`)}catch(n){alert("Apologies! The site experienced an error, check the log for details."),console.log(n)}}}})(),v=t.p+"70b31a150718103316b7.svg",B=(()=>{const n=()=>{const n=(0,h.az)("div",{class:"tempBtnContainer"}),e=(0,h.az)("div",{class:"tempToggle"});return e.textContent="°F",e.setAttribute("id","far"),n.appendChild(e),n},e=n=>{const e=Array.from(document.querySelectorAll("div#temp"));void 0!==e&&e.forEach((e=>{const t=Array.from(e.classList);e.textContent=t[n]}))};let t=!1;return{initial:()=>{const e=(0,h.az)("div",{class:"main"}),t=(0,h.az)("div",{class:"inputContainer"}),r=(0,h.az)("div",{class:"inputSearch"}),i=(0,h.az)("input",{class:"inputField",id:"inputField","aria-label":"Input Location",title:"Format as: 'City', 'City, State', OR 'City, Country'",placeholder:"Search location..."}),a=(0,h.az)("button",{class:"submitBtn","aria-label":"Submit"}),o=(0,h.az)("img",{class:"searchIcon"});return o.src=v,o.alt="Search",t.appendChild(r),r.appendChild(i),r.appendChild(a),a.appendChild(o),t.appendChild(n()),e.appendChild(t),e},temp:n,submitFn:(n,e)=>{const r=n.value;x.mainFn(r,t,e),n.value=""},toggleFn:n=>{t?(n.textContent="°F",e(0),n.setAttribute("id","far")):(n.textContent="°C",e(1),n.setAttribute("id","cel")),t=!t}}})();document.querySelector("body").appendChild((()=>{const n=B.initial(),e=n.children[0].children[0].children[0],t=n.children[0].children[0].children[1],r=n.children[0].children[1].children[0];return t.addEventListener("click",(()=>{B.submitFn(e,n)})),r.addEventListener("click",(()=>{B.toggleFn(r)})),n})())})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,