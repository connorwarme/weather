(()=>{"use strict";var n={426:(n,e,t)=>{t.d(e,{Z:()=>s});var i=t(537),r=t.n(i),a=t(645),o=t.n(a)()(r());o.push([n.id,'* {\n    padding: 0;\n    margin: 0;\n}\n.main {\n    background-color: #3d5a80;\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    grid-template-rows: 1fr 5fr;\n    width: 100vw;\n    font-family: Georgia, \'Times New Roman\', Times, serif;\n}\n.inputContainer {\n    grid-column: 1/3;\n    display: grid;\n    height: 100px;\n    /* justify-content: center;\n    align-items: center; */\n    grid-template-columns: 1fr 3fr 1fr;\n    background-color: #3d5a80;\n}\n.inputSearch {\n    grid-column: 2/3;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n.inputField {\n    width: 200px;\n    height: 40px;\n    color:rgb(41, 50, 65);\n    font-weight: 500;\n    font-size: 18px;\n    background-color: rgb(152, 193, 217);\n    border: 2px solid #e0fbfc;\n    border-radius: 10px;\n    padding: 0 10px;\n    margin: 10px;\n    transition-duration: 0.5s;\n}\n.inputField:hover,\n.inputField:focus {\n    height: 50px;\n    outline: none;\n}\n.submitBtn {\n    height: 55px;\n    width: 55px;\n    background-color: rgb(152, 193, 217);\n    border: 2px solid #e0fbfc;\n    border-radius: 15px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n.submitBtn > img {\n    filter: invert(18%) sepia(8%) saturate(1746%) hue-rotate(179deg) brightness(96%) contrast(95%);\n    transition-timing-function: ease-in-out;\n    transition-duration: 0.25s;\n}\n.submitBtn:hover {\n    cursor: pointer;\n}\n.submitBtn:active {\n    transform: scale(0.98);\n    box-shadow: 3px 2px 22px 1px rgba(0, 0, 0, 0.24);\n}\n.searchIcon {\n    height: 48px;\n}\n.submitBtn:hover .searchIcon {\n    transform: scale(1.15);\n}\n.tempBtnContainer {\n    grid-column: 3/4;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n.tempToggle {\n    width: 100px;\n    height: 25px;\n    font-size: 22px;\n    font-weight: 500;\n    border-radius: 10px;\n    border: 2px solid #e0fbfc;\n    background-color: rgb(238, 108, 77);\n    padding: 7px 16px 7px 16px;\n    display: block;\n    position: relative;\n    text-align: end;\n    cursor: pointer;\n    transition-duration: 0.3s;\n}\n#far {\n    text-align: start;\n    background-color: rgb(152, 193, 217);\n}\n.tempToggle::after {\n    content: "";\n    width: 32px;\n    height: 32px;\n    background-color: rgb(61, 90, 128);\n    box-shadow: 2px 2px 3px rgb(41, 50, 65);\n    position: absolute;\n    border-radius: 5px;\n    top: 3px;\n    left: 4px;\n    transition-duration: 0.5s;\n}\n#far::after {\n    left: calc(100% - 5px);\n    transform: translateX(-100%);\n}\n.tempToggle:active::after {\n    width: 36px;\n}\n.mainContainer {\n    grid-row: 2/3;\n    grid-column: 1/2;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n}\n.locationContainer {\n    display: flex;\n}\n.mainCity {\n    font-size: 40px;\n    font-weight: bold;\n}\n.mainTempContainer {\n    font-size: 72px;\n}\n.highlowContainer {\n    display: flex;\n}\n.highlowContainer :first-child {\n    font-size: 40px;\n    margin-right: 20px;\n}\n.highlowContainer :last-child {\n    font-size: 28px;\n    display: flex;\n    align-items: center;\n}\n.highlowContainer :first-child::after {\n    content: "";\n    height: 48px;\n    width: 4px;\n    border-radius: 2px;\n    margin: 0 8px;\n    background-color: black;\n    position: absolute;\n}\n.iconContainer {\n    display: flex;\n    flex-direction: column;\n}\n.mainWeatherIcon {\n    margin: -35px 0;\n}\n.mainDescription {\n    display: flex;\n    justify-content: center;\n}\n.detailContainer {\n    grid-row: 2/3;\n    grid-column: 2/3;\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    grid-template-rows: repeat(5, 1fr);\n}\n.detailContainer > div {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n}\n.detailContainer > div#wind {\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    grid-template-rows: 1fr 1fr;\n}\n.detailContainer > div#wind .detailLabel {\n    grid-area: 1/1/2/3;\n    justify-self: center;\n    align-self: end;\n}\n.windIcon {\n    height: 35px;\n    grid-area: 2/1/3/2;\n    justify-self: end;\n    align-self: start;\n    margin-right: 5px;\n}\n.detailContainer > div#wind .detailData {\n    grid-area: 2/2/3/3;\n    align-self: start;\n    margin-top: 8px;\n}',"",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,UAAU;IACV,SAAS;AACb;AACA;IACI,yBAAyB;IACzB,aAAa;IACb,8BAA8B;IAC9B,2BAA2B;IAC3B,YAAY;IACZ,qDAAqD;AACzD;AACA;IACI,gBAAgB;IAChB,aAAa;IACb,aAAa;IACb;0BACsB;IACtB,kCAAkC;IAClC,yBAAyB;AAC7B;AACA;IACI,gBAAgB;IAChB,aAAa;IACb,uBAAuB;IACvB,mBAAmB;AACvB;AACA;IACI,YAAY;IACZ,YAAY;IACZ,qBAAqB;IACrB,gBAAgB;IAChB,eAAe;IACf,oCAAoC;IACpC,yBAAyB;IACzB,mBAAmB;IACnB,eAAe;IACf,YAAY;IACZ,yBAAyB;AAC7B;AACA;;IAEI,YAAY;IACZ,aAAa;AACjB;AACA;IACI,YAAY;IACZ,WAAW;IACX,oCAAoC;IACpC,yBAAyB;IACzB,mBAAmB;IACnB,aAAa;IACb,uBAAuB;IACvB,mBAAmB;AACvB;AACA;IACI,8FAA8F;IAC9F,uCAAuC;IACvC,0BAA0B;AAC9B;AACA;IACI,eAAe;AACnB;AACA;IACI,sBAAsB;IACtB,gDAAgD;AACpD;AACA;IACI,YAAY;AAChB;AACA;IACI,sBAAsB;AAC1B;AACA;IACI,gBAAgB;IAChB,aAAa;IACb,uBAAuB;IACvB,mBAAmB;AACvB;AACA;IACI,YAAY;IACZ,YAAY;IACZ,eAAe;IACf,gBAAgB;IAChB,mBAAmB;IACnB,yBAAyB;IACzB,mCAAmC;IACnC,0BAA0B;IAC1B,cAAc;IACd,kBAAkB;IAClB,eAAe;IACf,eAAe;IACf,yBAAyB;AAC7B;AACA;IACI,iBAAiB;IACjB,oCAAoC;AACxC;AACA;IACI,WAAW;IACX,WAAW;IACX,YAAY;IACZ,kCAAkC;IAClC,uCAAuC;IACvC,kBAAkB;IAClB,kBAAkB;IAClB,QAAQ;IACR,SAAS;IACT,yBAAyB;AAC7B;AACA;IACI,sBAAsB;IACtB,4BAA4B;AAChC;AACA;IACI,WAAW;AACf;AACA;IACI,aAAa;IACb,gBAAgB;IAChB,aAAa;IACb,sBAAsB;IACtB,uBAAuB;IACvB,mBAAmB;AACvB;AACA;IACI,aAAa;AACjB;AACA;IACI,eAAe;IACf,iBAAiB;AACrB;AACA;IACI,eAAe;AACnB;AACA;IACI,aAAa;AACjB;AACA;IACI,eAAe;IACf,kBAAkB;AACtB;AACA;IACI,eAAe;IACf,aAAa;IACb,mBAAmB;AACvB;AACA;IACI,WAAW;IACX,YAAY;IACZ,UAAU;IACV,kBAAkB;IAClB,aAAa;IACb,uBAAuB;IACvB,kBAAkB;AACtB;AACA;IACI,aAAa;IACb,sBAAsB;AAC1B;AACA;IACI,eAAe;AACnB;AACA;IACI,aAAa;IACb,uBAAuB;AAC3B;AACA;IACI,aAAa;IACb,gBAAgB;IAChB,aAAa;IACb,8BAA8B;IAC9B,kCAAkC;AACtC;AACA;IACI,aAAa;IACb,sBAAsB;IACtB,uBAAuB;IACvB,mBAAmB;AACvB;AACA;IACI,aAAa;IACb,8BAA8B;IAC9B,2BAA2B;AAC/B;AACA;IACI,kBAAkB;IAClB,oBAAoB;IACpB,eAAe;AACnB;AACA;IACI,YAAY;IACZ,kBAAkB;IAClB,iBAAiB;IACjB,iBAAiB;IACjB,iBAAiB;AACrB;AACA;IACI,kBAAkB;IAClB,iBAAiB;IACjB,eAAe;AACnB",sourcesContent:['* {\n    padding: 0;\n    margin: 0;\n}\n.main {\n    background-color: #3d5a80;\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    grid-template-rows: 1fr 5fr;\n    width: 100vw;\n    font-family: Georgia, \'Times New Roman\', Times, serif;\n}\n.inputContainer {\n    grid-column: 1/3;\n    display: grid;\n    height: 100px;\n    /* justify-content: center;\n    align-items: center; */\n    grid-template-columns: 1fr 3fr 1fr;\n    background-color: #3d5a80;\n}\n.inputSearch {\n    grid-column: 2/3;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n.inputField {\n    width: 200px;\n    height: 40px;\n    color:rgb(41, 50, 65);\n    font-weight: 500;\n    font-size: 18px;\n    background-color: rgb(152, 193, 217);\n    border: 2px solid #e0fbfc;\n    border-radius: 10px;\n    padding: 0 10px;\n    margin: 10px;\n    transition-duration: 0.5s;\n}\n.inputField:hover,\n.inputField:focus {\n    height: 50px;\n    outline: none;\n}\n.submitBtn {\n    height: 55px;\n    width: 55px;\n    background-color: rgb(152, 193, 217);\n    border: 2px solid #e0fbfc;\n    border-radius: 15px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n.submitBtn > img {\n    filter: invert(18%) sepia(8%) saturate(1746%) hue-rotate(179deg) brightness(96%) contrast(95%);\n    transition-timing-function: ease-in-out;\n    transition-duration: 0.25s;\n}\n.submitBtn:hover {\n    cursor: pointer;\n}\n.submitBtn:active {\n    transform: scale(0.98);\n    box-shadow: 3px 2px 22px 1px rgba(0, 0, 0, 0.24);\n}\n.searchIcon {\n    height: 48px;\n}\n.submitBtn:hover .searchIcon {\n    transform: scale(1.15);\n}\n.tempBtnContainer {\n    grid-column: 3/4;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n.tempToggle {\n    width: 100px;\n    height: 25px;\n    font-size: 22px;\n    font-weight: 500;\n    border-radius: 10px;\n    border: 2px solid #e0fbfc;\n    background-color: rgb(238, 108, 77);\n    padding: 7px 16px 7px 16px;\n    display: block;\n    position: relative;\n    text-align: end;\n    cursor: pointer;\n    transition-duration: 0.3s;\n}\n#far {\n    text-align: start;\n    background-color: rgb(152, 193, 217);\n}\n.tempToggle::after {\n    content: "";\n    width: 32px;\n    height: 32px;\n    background-color: rgb(61, 90, 128);\n    box-shadow: 2px 2px 3px rgb(41, 50, 65);\n    position: absolute;\n    border-radius: 5px;\n    top: 3px;\n    left: 4px;\n    transition-duration: 0.5s;\n}\n#far::after {\n    left: calc(100% - 5px);\n    transform: translateX(-100%);\n}\n.tempToggle:active::after {\n    width: 36px;\n}\n.mainContainer {\n    grid-row: 2/3;\n    grid-column: 1/2;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n}\n.locationContainer {\n    display: flex;\n}\n.mainCity {\n    font-size: 40px;\n    font-weight: bold;\n}\n.mainTempContainer {\n    font-size: 72px;\n}\n.highlowContainer {\n    display: flex;\n}\n.highlowContainer :first-child {\n    font-size: 40px;\n    margin-right: 20px;\n}\n.highlowContainer :last-child {\n    font-size: 28px;\n    display: flex;\n    align-items: center;\n}\n.highlowContainer :first-child::after {\n    content: "";\n    height: 48px;\n    width: 4px;\n    border-radius: 2px;\n    margin: 0 8px;\n    background-color: black;\n    position: absolute;\n}\n.iconContainer {\n    display: flex;\n    flex-direction: column;\n}\n.mainWeatherIcon {\n    margin: -35px 0;\n}\n.mainDescription {\n    display: flex;\n    justify-content: center;\n}\n.detailContainer {\n    grid-row: 2/3;\n    grid-column: 2/3;\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    grid-template-rows: repeat(5, 1fr);\n}\n.detailContainer > div {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n}\n.detailContainer > div#wind {\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    grid-template-rows: 1fr 1fr;\n}\n.detailContainer > div#wind .detailLabel {\n    grid-area: 1/1/2/3;\n    justify-self: center;\n    align-self: end;\n}\n.windIcon {\n    height: 35px;\n    grid-area: 2/1/3/2;\n    justify-self: end;\n    align-self: start;\n    margin-right: 5px;\n}\n.detailContainer > div#wind .detailData {\n    grid-area: 2/2/3/3;\n    align-self: start;\n    margin-top: 8px;\n}'],sourceRoot:""}]);const s=o},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",i=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),i&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),i&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,i,r,a){"string"==typeof n&&(n=[[null,n,void 0]]);var o={};if(i)for(var s=0;s<this.length;s++){var l=this[s][0];null!=l&&(o[l]=!0)}for(var c=0;c<n.length;c++){var A=[].concat(n[c]);i&&o[A[0]]||(void 0!==a&&(void 0===A[5]||(A[1]="@layer".concat(A[5].length>0?" ".concat(A[5]):""," {").concat(A[1],"}")),A[5]=a),t&&(A[2]?(A[1]="@media ".concat(A[2]," {").concat(A[1],"}"),A[2]=t):A[2]=t),r&&(A[4]?(A[1]="@supports (".concat(A[4],") {").concat(A[1],"}"),A[4]=r):A[4]="".concat(r)),e.push(A))}},e}},537:n=>{n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var i=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(i),a="/*# ".concat(r," */"),o=t.sources.map((function(n){return"/*# sourceURL=".concat(t.sourceRoot||"").concat(n," */")}));return[e].concat(o).concat([a]).join("\n")}return[e].join("\n")}},882:(n,e,t)=>{function i(n,e){if(e.length<n)throw new TypeError(n+" argument"+(n>1?"s":"")+" required, but only "+e.length+" present")}t.d(e,{Z:()=>i})},99:(n,e,t)=>{t.d(e,{Z:()=>o});var i=t(13);function r(n){if(null===n||!0===n||!1===n)return NaN;var e=Number(n);return isNaN(e)?e:e<0?Math.ceil(e):Math.floor(e)}var a=t(882);function o(n){(0,a.Z)(1,arguments);var e=r(n);return(0,i.Z)(1e3*e)}},805:(n,e,t)=>{t.d(e,{Z:()=>A});var i=t(13),r=t(882);function a(n){(0,r.Z)(1,arguments);var e=(0,i.Z)(n),t=new Date(0);return t.setFullYear(e.getFullYear(),0,1),t.setHours(0,0,0,0),t}function o(n){var e=new Date(Date.UTC(n.getFullYear(),n.getMonth(),n.getDate(),n.getHours(),n.getMinutes(),n.getSeconds(),n.getMilliseconds()));return e.setUTCFullYear(n.getFullYear()),n.getTime()-e.getTime()}function s(n){(0,r.Z)(1,arguments);var e=(0,i.Z)(n);return e.setHours(0,0,0,0),e}var l=864e5;function c(n,e){(0,r.Z)(2,arguments);var t=s(n),i=s(e),a=t.getTime()-o(t),c=i.getTime()-o(i);return Math.round((a-c)/l)}function A(n){(0,r.Z)(1,arguments);var e=(0,i.Z)(n),t=c(e,a(e)),o=t+1;return o}},13:(n,e,t)=>{t.d(e,{Z:()=>r});var i=t(882);function r(n){(0,i.Z)(1,arguments);var e=Object.prototype.toString.call(n);return n instanceof Date||"object"==typeof n&&"[object Date]"===e?new Date(n.getTime()):"number"==typeof n||"[object Number]"===e?new Date(n):("string"!=typeof n&&"[object String]"!==e||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}},379:n=>{var e=[];function t(n){for(var t=-1,i=0;i<e.length;i++)if(e[i].identifier===n){t=i;break}return t}function i(n,i){for(var a={},o=[],s=0;s<n.length;s++){var l=n[s],c=i.base?l[0]+i.base:l[0],A=a[c]||0,d="".concat(c," ").concat(A);a[c]=A+1;var p=t(d),u={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==p)e[p].references++,e[p].updater(u);else{var C=r(u,i);i.byIndex=s,e.splice(s,0,{identifier:d,updater:C,references:1})}o.push(d)}return o}function r(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,r){var a=i(n=n||[],r=r||{});return function(n){n=n||[];for(var o=0;o<a.length;o++){var s=t(a[o]);e[s].references--}for(var l=i(n,r),c=0;c<a.length;c++){var A=t(a[c]);0===e[A].references&&(e[A].updater(),e.splice(A,1))}a=l}}},569:n=>{var e={};n.exports=function(n,t){var i=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!i)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");i.appendChild(t)}},216:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},565:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},795:n=>{n.exports=function(n){var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var i="";t.supports&&(i+="@supports (".concat(t.supports,") {")),t.media&&(i+="@media ".concat(t.media," {"));var r=void 0!==t.layer;r&&(i+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),i+=t.css,r&&(i+="}"),t.media&&(i+="}"),t.supports&&(i+="}");var a=t.sourceMap;a&&"undefined"!=typeof btoa&&(i+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleTagTransform(i,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}},672:(n,e,t)=>{t.d(e,{Z:()=>s});var i=t(923);const r=t.p+"e5b06e192f6d2362c54f.svg",a=(0,i.az)("div",{class:"detailContainer"}),o=(()=>{const n=(n,e)=>{const t=(0,i.az)("div",{class:"detailDiv"}),r=(0,i.az)("div",{class:"detailLabel"}),a=(0,i.az)("div",{class:"detailData"});return r.textContent=`${n}`,a.textContent=`${e}`,t.appendChild(r),t.appendChild(a),t};return{windFn:e=>{const t=n("Wind",`${e.speed} mph`);t.setAttribute("id","wind");const a=(0,i.az)("img",{class:"windIcon"});return a.src=r,a.style.transform=`rotate(${e.deg}deg)`,a.alt=`Wind direction: ${e.deg}`,t.insertBefore(a,t.children[1]),t},visFn:e=>n("Visibility",e/1e3+" mi"),humidFn:e=>n("Humidity",`${e} %`),feelsFn:(e,t)=>{const r=n("Feels Like",""),a=(0,i.az)("div",{id:"temp",class:`${t.feelsLike.far} ${t.feelsLike.cel}`});return a.textContent=`${e}`,r.children[1].appendChild(a),r},popFn:e=>{const t=n("Precipitation",`${Math.round(100*e)} %`),r=(0,i.az)("div",{class:"popLabel"});return r.textContent="Chance of",t.insertBefore(r,t.firstChild),t},precipFn:e=>{let t={"3h":0};void 0!==e&&(t=e);const r=n("Accumulation",`${t["3h"]}mm in last 3h`),a=(0,i.az)("div",{class:"precipLabel"});return a.textContent="Precipitation",r.insertBefore(a,r.firstChild),r},airFn:e=>{const t=n("Air Quality",`${e}`);return t.children[1].setAttribute("id",`quality${e}`),t},pressureFn:e=>n("Pressure",`${e} hPa`),sunriseFn:e=>n("Sunrise",`${e}`),sunsetFn:e=>n("Sunset",`${e}`)}})(),s=(n,e)=>{const t=(0,i.bq)(e);return a.appendChild(o.windFn(n.wind)),a.appendChild(o.visFn(n.visibility)),a.appendChild(o.feelsFn(n.feelsLike[t],n)),a.appendChild(o.humidFn(n.humidity)),a.appendChild(o.popFn(n.pop)),a.appendChild(o.precipFn(n.precip)),a.appendChild(o.airFn(n.airQuality)),a.appendChild(o.pressureFn(n.pressure)),a.appendChild(o.sunriseFn(n.sunrise)),a.appendChild(o.sunsetFn(n.sunset)),a}},715:(n,e,t)=>{t.d(e,{Z:()=>a});var i=t(923);const r=(()=>{const n=(0,i.az)("div",{class:"forecastContainer"});return{forecast:(e,t,r)=>{const a=Object.keys(e).length,o=[];for(let n=0;n<a;n+=1)o[n]=e[n];let s=0;return o.forEach((e=>{const a=(0,i.az)("div",{class:`card${s}`});((n,e,t,r)=>{Object.keys(e).forEach((a=>{const o=(0,i.az)("div",{class:"forecastBlock"});t.appendChild(o),o.appendChild(((n,e)=>{const t=(0,i.XV)(e.dt,n.timezone),r=(0,i.az)("div",{class:"timeDiv"});return r.textContent=`${(0,i.MH)(t.getHours())}00`,r})(n,e[a])),o.appendChild(((n,e)=>{const t=(0,i.Jn)(n.main.temp),r=(0,i.bq)(e),a=(0,i.az)("div",{class:"tempDiv"}),o=(0,i.az)("div",{id:"temp",class:`${t.far} ${t.cel}`});return o.textContent=`${t[r]}`,a.appendChild(o),a})(e[a],r)),o.appendChild((n=>{const e=(0,i.az)("div",{class:"forecastIconContainer"}),t=(0,i.az)("img",{class:"forecastIcon","aria-label":"Forecast Icon",title:`${n.weather[0].description}`});return t.src=`http://openweathermap.org/img/wn/${n.weather[0].icon}@2x.png`,t.alt=n.weather[0].main,e.appendChild(t),e})(e[a])),o.appendChild((n=>{const e=n.pop,t=(0,i.az)("div",{class:"popDiv"});return t.textContent=`${Math.round(100*e)}%`,t})(e[a]))}))})(t,e,a,r),n.appendChild(a),s+=1})),n}}})(),a=(n,e,t)=>(console.log(n),console.log(e),r.forecast(n,e,t))},916:(n,e,t)=>{t.d(e,{Z:()=>a});var i=t(923);const r=(n,e)=>{const t=(0,i.az)("div",{class:"mainContainer"}),r=(0,i.az)("div",{class:"locationContainer"}),a=(0,i.az)("div",{class:"mainCity"}),o=(0,i.az)("div",{class:"mainCountry"}),s=(0,i.az)("div",{class:"mainTempContainer"}),l=(0,i.az)("div",{id:"temp",class:`${n.temp.far} ${n.temp.cel}`}),c=(0,i.az)("div",{class:"highlowContainer"}),A=(0,i.az)("div",{id:"temp",class:`${n.high.far} ${n.high.cel}`}),d=(0,i.az)("div",{id:"temp",class:`${n.low.far} ${n.low.cel}`}),p=(0,i.az)("div",{class:"iconContainer"}),u=(0,i.az)("img",{class:"mainWeatherIcon","aria-label":"Weather Icon"});u.src=`http://openweathermap.org/img/wn/${n.icon}@4x.png`,u.alt=`${n.description}`;const C=(0,i.az)("div",{class:"mainDescription"}),g=(0,i.bq)(e);return a.textContent=n.city.toUpperCase(),o.textContent=n.country,l.textContent=n.temp[g],A.textContent=`${n.high[g]}`,d.textContent=`${n.low[g]}`,C.textContent=n.conditions,t.appendChild(r),r.appendChild(a),r.appendChild(o),t.appendChild(s),s.appendChild(l),t.appendChild(c),c.appendChild(A),c.appendChild(d),t.appendChild(p),p.appendChild(u),p.appendChild(C),t},a=(n,e)=>r(n,e)},389:(n,e,t)=>{t.d(e,{V:()=>a,j:()=>o});var i=t(805);const r=(n,e)=>{const t=e.dt_txt,i=new Date(t);return i.setMinutes(i.getMinutes()+n.city.timezone/60),i},a=n=>{const e=r(n,n.list[0]),t=(e.getDate(),n.list);console.log(t);const a={0:{},1:{},2:{},3:{},4:{},5:{}};return t.forEach((t=>{const o=r(n,t),s=(0,i.Z)(o)-(0,i.Z)(e);console.log(s);const l=o.getHours();a[s][l]=t})),a},o=n=>{const e=Object.keys(n);let t=n[e[0]].main.temp,i=n[e[0]].main.temp;for(let r=0;r<e.length;r+=1){const{temp:a}=n[e[r]].main;console.log(a),a>t&&(t=a),a<i&&(i=a)}return[t,i]}},923:(n,e,t)=>{t.d(e,{Jn:()=>c,MH:()=>o,XV:()=>a,az:()=>r,bq:()=>A,eJ:()=>l,fW:()=>d});var i=t(99);const r=(n,e)=>{const t=document.createElement(`${n}`);return null==e||((n,e)=>{Object.entries(e).forEach((([e,t])=>{n.setAttribute(e,t)}))})(t,e),t},a=(n,e)=>{const t=(0,i.Z)(n),r=t.getTimezoneOffset();return t.setMinutes(t.getMinutes()+r),t.setMinutes(t.getMinutes()+e/60),t},o=n=>{let e=n;return n<10&&(e=`0${n}`),e},s=n=>{let e=n;return n<10&&(e=`0${n}`),e},l=(n,e)=>{const t=a(n,e);return`${s(t.getHours())}:${s(t.getMinutes())}`},c=n=>({far:Math.round(Number(n)),cel:Math.round((Number(n)-32)*(5/9))}),A=n=>{let e="cel";return!1===n&&(e="far"),e},d=(n,e,t)=>{let i=e,r=t;return n>e&&(i=n),n<t&&(r=t),[i,r]}}},e={};function t(i){var r=e[i];if(void 0!==r)return r.exports;var a=e[i]={id:i,exports:{}};return n[i](a,a.exports,t),a.exports}t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var i in e)t.o(e,i)&&!t.o(n,i)&&Object.defineProperty(n,i,{enumerable:!0,get:e[i]})},t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(n){if("object"==typeof window)return window}}(),t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),(()=>{var n;t.g.importScripts&&(n=t.g.location+"");var e=t.g.document;if(!n&&e&&(e.currentScript&&(n=e.currentScript.src),!n)){var i=e.getElementsByTagName("script");i.length&&(n=i[i.length-1].src)}if(!n)throw new Error("Automatic publicPath is not supported in this browser");n=n.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=n})(),t.nc=void 0,(()=>{var n=t(379),e=t.n(n),i=t(795),r=t.n(i),a=t(569),o=t.n(a),s=t(565),l=t.n(s),c=t(216),A=t.n(c),d=t(589),p=t.n(d),u=t(426),C={};C.styleTagTransform=p(),C.setAttributes=l(),C.insert=o().bind(null,"head"),C.domAPI=r(),C.insertStyleElement=A(),e()(u.Z,C),u.Z&&u.Z.locals&&u.Z.locals;var g=t(923),f=t(672),h=t(916),m=t(389),B=t(715);const I=(()=>{const n="917a17f77a60ae96ee081212e94e3f75",e=n=>{for(;n.firstChild;)n.removeChild(n.firstChild)};return{mainFn:async(t,i,r)=>{try{const a=await(async e=>{const t=e,i=await fetch(`https://api.openweathermap.org/data/2.5/forecast?q=${t}&appid=${n}&units=imperial`,{mode:"cors"});return await i.json()})(t);if((n=>{let e="";return"200"!==n.cod?(e=!1,(n=>{const e=document.querySelector("div.inputContainer");if("404"===n.cod){const n=(0,g.az)("div",{class:"errorDisplay"});n.textContent="Location not found!",e.appendChild(n)}})(n)):e=!0,e})(a)){const o=(0,m.V)(a),s=(0,m.j)(o[0]),l=await(async e=>{const t=await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${e}&appid=${n}&units=imperial`,{mode:"cors"});return await t.json()})(t),c=await(async(e,t)=>{const i=await fetch(`http://api.openweathermap.org/data/2.5/air_pollution?lat=${e}&lon=${t}&appid=${n}`,{mode:"cors"});return await i.json()})(a.city.coord.lat,a.city.coord.lon);Promise.all([a,l,c]).then((n=>{const t=(([n,e,t],i)=>{console.log([n,e,t]);const r=e.name,a=`${e.coord.lat}, ${e.coord.lon}`,o=(0,g.Jn)(e.main.temp),s=(0,g.fW)(o,i[0],i[1]),l=(0,g.Jn)(s[0]),c=(0,g.Jn)(s[1]),A=e.weather[0].main,{description:d}=e.weather[0],{icon:p}=e.weather[0],{wind:u}=n.list[0],{pop:C}=n.list[0],{timezone:f}=n.city,h=(0,g.eJ)(n.city.sunrise,f),m=(0,g.eJ)(n.city.sunset,f),{humidity:B}=n.list[0].main,I=(0,g.Jn)(n.list[0].main.feels_like),{visibility:b}=n.list[0],x=n.list[0].rain,v=t.list[0].main.aqi,{pressure:y}=n.list[0].main;return{city:r,gps:a,temp:o,high:l,low:c,conditions:A,description:d,icon:p,wind:u,pop:C,sunrise:h,sunset:m,timezone:f,humidity:B,feelsLike:I,visibility:b,precip:x,airQuality:v,pressure:y}})(n,s);console.log(t),(n=>{console.log(n.children.length);for(let t=1;t<n.children.length;t+=0)console.log(n.children[0].nextElementSibling),e(n.children[0].nextElementSibling),n.removeChild(n.children[0].nextElementSibling)})(r);const a=(0,f.Z)(t,i);r.appendChild(a);const l=(0,h.Z)(t,i);r.appendChild(l);const c=(0,B.Z)(o,t,i);r.appendChild(c)})).catch((n=>{alert("Apologies! The site experienced an error, check the log for details."),console.log(n)}))}else console.log(`Apologies! The site experienced an error: "${a.message}".`)}catch(n){alert("Apologies! The site experienced an error, check the log for details."),console.log(n)}}}})(),b=t.p+"70b31a150718103316b7.svg",x=(()=>{const n=()=>{const n=(0,g.az)("div",{class:"tempBtnContainer"}),e=(0,g.az)("div",{class:"tempToggle"});return e.textContent="°F",e.setAttribute("id","far"),n.appendChild(e),n},e=n=>{const e=Array.from(document.querySelectorAll("div#temp"));void 0!==e&&e.forEach((e=>{const t=Array.from(e.classList);e.textContent=t[n]}))};let t=!1;return{initial:()=>{const e=(0,g.az)("div",{class:"main"}),t=(0,g.az)("div",{class:"inputContainer"}),i=(0,g.az)("div",{class:"inputSearch"}),r=(0,g.az)("input",{class:"inputField",id:"inputField","aria-label":"Input Location",title:"Format as: 'City', 'City, State', OR 'City, Country'",placeholder:"Search location..."}),a=(0,g.az)("button",{class:"submitBtn","aria-label":"Submit"}),o=(0,g.az)("img",{class:"searchIcon"});return o.src=b,o.alt="Search",t.appendChild(i),i.appendChild(r),i.appendChild(a),a.appendChild(o),t.appendChild(n()),e.appendChild(t),e},temp:n,submitFn:(n,e)=>{const i=n.value;I.mainFn(i,t,e),n.value=""},toggleFn:n=>{t?(n.textContent="°F",e(0),n.setAttribute("id","far")):(n.textContent="°C",e(1),n.setAttribute("id","cel")),t=!t}}})();document.querySelector("body").appendChild((()=>{const n=x.initial(),e=n.children[0].children[0].children[0],t=n.children[0].children[0].children[1],i=n.children[0].children[1].children[0];return t.addEventListener("click",(()=>{x.submitFn(e,n)})),i.addEventListener("click",(()=>{x.toggleFn(i)})),n})())})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,