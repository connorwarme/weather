(()=>{"use strict";var e={426:(e,t,n)=>{n.d(t,{Z:()=>s});var r=n(537),a=n.n(r),i=n(645),o=n.n(i)()(a());o.push([e.id,"* {\n    padding: 0;\n    margin: 0;\n}\n.main {\n    background-color: slateblue;\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    grid-template-rows: 1fr 5fr;\n}.inputContainer {\n    grid-column: 1/3;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n.mainContainer {\n    grid-row: 2/3;\n    grid-column: 1/2;\n}\n.detailContainer {\n    grid-row: 2/3;\n    grid-column: 2/3;\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    grid-template-rows: repeat(5, 1fr);\n}\n.detailContainer > div {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,UAAU;IACV,SAAS;AACb;AACA;IACI,2BAA2B;IAC3B,aAAa;IACb,8BAA8B;IAC9B,2BAA2B;AAC/B,CAAC;IACG,gBAAgB;IAChB,aAAa;IACb,uBAAuB;IACvB,mBAAmB;AACvB;AACA;IACI,aAAa;IACb,gBAAgB;AACpB;AACA;IACI,aAAa;IACb,gBAAgB;IAChB,aAAa;IACb,8BAA8B;IAC9B,kCAAkC;AACtC;AACA;IACI,aAAa;IACb,sBAAsB;IACtB,uBAAuB;IACvB,mBAAmB;AACvB",sourcesContent:["* {\n    padding: 0;\n    margin: 0;\n}\n.main {\n    background-color: slateblue;\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    grid-template-rows: 1fr 5fr;\n}.inputContainer {\n    grid-column: 1/3;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n}\n.mainContainer {\n    grid-row: 2/3;\n    grid-column: 1/2;\n}\n.detailContainer {\n    grid-row: 2/3;\n    grid-column: 2/3;\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    grid-template-rows: repeat(5, 1fr);\n}\n.detailContainer > div {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n}"],sourceRoot:""}]);const s=o},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,a,i){"string"==typeof e&&(e=[[null,e,void 0]]);var o={};if(r)for(var s=0;s<this.length;s++){var c=this[s][0];null!=c&&(o[c]=!0)}for(var l=0;l<e.length;l++){var d=[].concat(e[l]);r&&o[d[0]]||(void 0!==i&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=i),n&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=n):d[2]=n),a&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=a):d[4]="".concat(a)),t.push(d))}},t}},537:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),i="/*# ".concat(a," */"),o=n.sources.map((function(e){return"/*# sourceURL=".concat(n.sourceRoot||"").concat(e," */")}));return[t].concat(o).concat([i]).join("\n")}return[t].join("\n")}},174:(e,t,n)=>{function r(e,t){if(t.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+t.length+" present")}function a(e){r(1,arguments);var t=Object.prototype.toString.call(e);return e instanceof Date||"object"==typeof e&&"[object Date]"===t?new Date(e.getTime()):"number"==typeof e||"[object Number]"===t?new Date(e):("string"!=typeof e&&"[object String]"!==t||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}function i(e){if(null===e||!0===e||!1===e)return NaN;var t=Number(e);return isNaN(t)?t:t<0?Math.ceil(t):Math.floor(t)}function o(e){r(1,arguments);var t=i(e);return a(1e3*t)}n.d(t,{Z:()=>o})},379:e=>{var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var i={},o=[],s=0;s<e.length;s++){var c=e[s],l=r.base?c[0]+r.base:c[0],d=i[l]||0,p="".concat(l," ").concat(d);i[l]=d+1;var u=n(p),m={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==u)t[u].references++,t[u].updater(m);else{var h=a(m,r);r.byIndex=s,t.splice(s,0,{identifier:p,updater:h,references:1})}o.push(p)}return o}function a(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,a){var i=r(e=e||[],a=a||{});return function(e){e=e||[];for(var o=0;o<i.length;o++){var s=n(i[o]);t[s].references--}for(var c=r(e,a),l=0;l<i.length;l++){var d=n(i[l]);0===t[d].references&&(t[d].updater(),t.splice(d,1))}i=c}}},569:e=>{var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var a=void 0!==n.layer;a&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,a&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var i=n.sourceMap;i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},999:(e,t,n)=>{n.d(t,{Z:()=>s});var r=n(923);const a=n.p+"e4f5d026b8873feea9c3.png",i=(0,r.az)("div",{class:"detailContainer"}),o=(()=>{const e=(e,t)=>{const n=(0,r.az)("div",{class:"detailDiv"}),a=(0,r.az)("div",{class:"detailLabel"}),i=(0,r.az)("div",{class:"detailData"});return a.textContent=`${e}`,i.textContent=`${t}`,n.appendChild(a),n.appendChild(i),n};return{windFn:t=>{const n=e("WIND",`${t.speed} mph`),i=(0,r.az)("img",{class:"windIcon"});return i.src=a,i.style.transform=`rotate(${t.deg}deg)`,i.alt=`Wind direction: ${t.deg}`,n.insertBefore(i,n.children[1]),n},visFn:t=>e("VISIBILITY",t/1e3+" mi"),humidFn:t=>e("HUMIDITY",`${t} %`),feelsFn:(t,n)=>{const a=e("FEELS LIKE",""),i=(0,r.az)("div",{id:"temp",class:`${n.feelsLike.far} ${n.feelsLike.cel}`});return i.textContent=`${t}`,a.children[1].appendChild(i),a},popFn:t=>{const n=e("PRECIPITATION",`${Math.round(100*t)} %`),a=(0,r.az)("div",{class:"popLabel"});return a.textContent="CHANCE OF",n.insertBefore(a,n.firstChild),n},precipFn:t=>{let n={"3h":0};void 0!==t&&(n=t);const a=e("ACCUMULATION",`${n["3h"]}mm in last 3h`),i=(0,r.az)("div",{class:"precipLabel"});return i.textContent="PRECIPITATION",a.insertBefore(i,a.firstChild),a},airFn:t=>{const n=e("AIR QUALITY",`${t}`);return n.children[1].setAttribute("id",`quality${t}`),n},pressureFn:t=>e("PRESSURE",`${t} hPa`),sunriseFn:t=>e("SUNRISE",`${t}`),sunsetFn:t=>e("SUNSET",`${t}`)}})(),s=(e,t)=>{const n=(0,r.bq)(t);return i.appendChild(o.windFn(e.wind)),i.appendChild(o.visFn(e.visibility)),i.appendChild(o.feelsFn(e.feelsLike[n],e)),i.appendChild(o.humidFn(e.humidity)),i.appendChild(o.popFn(e.pop)),i.appendChild(o.precipFn(e.precip)),i.appendChild(o.airFn(e.airQuality)),i.appendChild(o.pressureFn(e.pressure)),i.appendChild(o.sunriseFn(e.sunrise)),i.appendChild(o.sunsetFn(e.sunset)),i}},715:(e,t,n)=>{n.d(t,{Z:()=>i});var r=n(923);const a=(()=>{const e=(0,r.az)("div",{class:"forecastContainer"});return{forecast:(t,n,a)=>{const i=Object.keys(t).length,o=[];for(let e=0;e<i;e+=1)o[e]=t[e];let s=0;return o.forEach((t=>{const i=(0,r.az)("div",{class:`card${s}`});((e,t,n,a)=>{Object.keys(t).forEach((i=>{const o=(0,r.az)("div",{class:"forecastBlock"});n.appendChild(o),o.appendChild(((e,t)=>{const n=(0,r.XV)(t.dt,e.timezone),a=(0,r.az)("div",{class:"timeDiv"});return a.textContent=`${(0,r.MH)(n.getHours())}00`,a})(e,t[i])),o.appendChild(((e,t)=>{const n=(0,r.Jn)(e.main.temp),a=(0,r.bq)(t),i=(0,r.az)("div",{class:"tempDiv"}),o=(0,r.az)("div",{id:"temp",class:`${n.far} ${n.cel}`});return o.textContent=`${n[a]}`,i.appendChild(o),i})(t[i],a)),o.appendChild((e=>{const t=(0,r.az)("div",{class:"forecastIconContainer"}),n=(0,r.az)("img",{class:"forecastIcon","aria-label":"Forecast Icon",title:`${e.weather[0].description}`});return n.src=`http://openweathermap.org/img/wn/${e.weather[0].icon}@2x.png`,n.alt=e.weather[0].main,t.appendChild(n),t})(t[i])),o.appendChild((e=>{const t=e.pop,n=(0,r.az)("div",{class:"popDiv"});return n.textContent=`${Math.round(100*t)}%`,n})(t[i]))}))})(n,t,i,a),e.appendChild(i),s+=1})),e}}})(),i=(e,t,n)=>(console.log(e),console.log(t),a.forecast(e,t,n))},916:(e,t,n)=>{n.d(t,{Z:()=>i});var r=n(923);const a=(e,t)=>{const n=(0,r.az)("div",{class:"mainContainer"}),a=(0,r.az)("div",{class:"locationContainer"}),i=(0,r.az)("div",{class:"mainCity"}),o=(0,r.az)("div",{class:"mainCountry"}),s=(0,r.az)("div",{class:"mainTempContainer"}),c=(0,r.az)("div",{id:"temp",class:`${e.temp.far} ${e.temp.cel}`}),l=(0,r.az)("div",{class:"highlowContainer"}),d=(0,r.az)("div",{id:"temp",class:`${e.high.far} ${e.high.cel}`}),p=(0,r.az)("div",{id:"temp",class:`${e.low.far} ${e.low.cel}`}),u=(0,r.az)("div",{class:"iconContainer"}),m=(0,r.az)("img",{class:"mainWeatherIcon","aria-label":"Weather Icon"});m.src=`http://openweathermap.org/img/wn/${e.icon}@4x.png`,m.alt=`${e.description}`;const h=(0,r.az)("div",{class:"mainDescription"}),f=(0,r.bq)(t);return i.textContent=e.city,o.textContent=e.country,c.textContent=e.temp[f],d.textContent=`${e.high[f]}`,p.textContent=`${e.low[f]}`,h.textContent=e.conditions,n.appendChild(a),a.appendChild(i),a.appendChild(o),n.appendChild(s),s.appendChild(c),n.appendChild(l),l.appendChild(d),l.appendChild(p),n.appendChild(u),u.appendChild(m),u.appendChild(h),n},i=(e,t)=>a(e,t)},389:(e,t,n)=>{n.d(t,{V:()=>a,j:()=>i});const r=(e,t)=>{const n=t.dt_txt,r=new Date(n);return r.setMinutes(r.getMinutes()+e.city.timezone/60),r},a=e=>{const t=r(e,e.list[0]).getDate(),n=e.list,a={0:{},1:{},2:{},3:{},4:{},5:{}};return n.forEach((n=>{const i=r(e,n),o=i.getDate()-t,s=i.getHours();a[o][s]=n})),a},i=e=>{const t=Object.keys(e);let n=e[t[0]].main.temp,r=e[t[0]].main.temp;for(let a=0;a<t.length;a+=1){const{temp:i}=e[t[a]].main;console.log(i),i>n&&(n=i),i<r&&(r=i)}return[n,r]}},923:(e,t,n)=>{n.d(t,{Jn:()=>l,MH:()=>o,XV:()=>i,az:()=>a,bq:()=>d,eJ:()=>c,fW:()=>p});var r=n(174);const a=(e,t)=>{const n=document.createElement(`${e}`);return null==t||((e,t)=>{Object.entries(t).forEach((([t,n])=>{e.setAttribute(t,n)}))})(n,t),n},i=(e,t)=>{const n=(0,r.Z)(e),a=n.getTimezoneOffset();return n.setMinutes(n.getMinutes()+a),n.setMinutes(n.getMinutes()+t/60),n},o=e=>{let t=e;return e<10&&(t=`0${e}`),t},s=e=>{let t=e;return e<10&&(t=`0${e}`),t},c=(e,t)=>{const n=i(e,t);return`${s(n.getHours())}:${s(n.getMinutes())}`},l=e=>({far:Math.round(Number(e)),cel:Math.round((Number(e)-32)*(5/9))}),d=e=>{let t="cel";return!1===e&&(t="far"),t},p=(e,t,n)=>{let r=t,a=n;return e>t&&(r=e),e<n&&(a=n),[r,a]}}},t={};function n(r){var a=t[r];if(void 0!==a)return a.exports;var i=t[r]={id:r,exports:{}};return e[r](i,i.exports,n),i.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{var e;n.g.importScripts&&(e=n.g.location+"");var t=n.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var r=t.getElementsByTagName("script");r.length&&(e=r[r.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),n.p=e})(),n.nc=void 0,(()=>{var e=n(379),t=n.n(e),r=n(795),a=n.n(r),i=n(569),o=n.n(i),s=n(565),c=n.n(s),l=n(216),d=n.n(l),p=n(589),u=n.n(p),m=n(426),h={};h.styleTagTransform=u(),h.setAttributes=c(),h.insert=o().bind(null,"head"),h.domAPI=a(),h.insertStyleElement=d(),t()(m.Z,h),m.Z&&m.Z.locals&&m.Z.locals;var f=n(923),C=n(999),g=n(916),v=n(389),A=n(715);const y=document.querySelector("body"),b=(0,f.az)("div",{class:"main"});y.appendChild(b);const w=(0,f.az)("div",{class:"inputContainer"}),I=(0,f.az)("input",{class:"inputField",id:"inputField","aria-label":"Input Location",title:"Format as: 'City', 'City, State', OR 'City, Country'",placeholder:"Search location..."}),$=(0,f.az)("button",{class:"submitBtn","aria-label":"Submit"});$.textContent="Search";const x=(0,f.az)("div",{class:"tempBtnContainer"}),B=(0,f.az)("div",{class:"tempToggle"});let z=!1;B.textContent="°F",x.appendChild(B);const S=e=>{const t=Array.from(document.querySelectorAll("div#temp"));console.log(t),void 0!==t&&t.forEach((t=>{const n=Array.from(t.classList);t.textContent=n[e]}))};B.addEventListener("click",(()=>{console.log(z),z?(B.textContent="°F",S(0)):(B.textContent="°C",S(1)),z=!z,console.log(z)})),w.appendChild(I),w.appendChild($),w.appendChild(x),b.appendChild(w),$.addEventListener("click",(()=>{(()=>{const e=I.value;E.mainFn(e,z),I.value=""})()}));const F=e=>{for(;e.firstChild;)e.removeChild(e.firstChild)},E=(()=>{const e="917a17f77a60ae96ee081212e94e3f75";return{mainFn:async(t,n)=>{try{const r=await(async t=>{const n=t,r=await fetch(`https://api.openweathermap.org/data/2.5/forecast?q=${n}&appid=${e}&units=imperial`,{mode:"cors"});return await r.json()})(t);if((e=>{let t="";return"200"!==e.cod?(t=!1,(e=>{const t=document.querySelector("div.inputContainer");if("404"===e.cod){const e=(0,f.az)("div",{class:"errorDisplay"});e.textContent="Location not found!",t.appendChild(e)}})(e)):t=!0,t})(r)){const a=(0,v.V)(r),i=(0,v.j)(a[0]),o=await(async t=>{const n=await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${t}&appid=${e}&units=imperial`,{mode:"cors"});return await n.json()})(t),s=await(async(t,n)=>{const r=await fetch(`http://api.openweathermap.org/data/2.5/air_pollution?lat=${t}&lon=${n}&appid=${e}`,{mode:"cors"});return await r.json()})(r.city.coord.lat,r.city.coord.lon);Promise.all([r,o,s]).then((e=>{const t=(([e,t,n],r)=>{console.log([e,t,n]);const a=t.name,i=`${t.coord.lat}, ${t.coord.lon}`,o=(0,f.Jn)(t.main.temp),s=(0,f.fW)(o,r[0],r[1]),c=(0,f.Jn)(s[0]),l=(0,f.Jn)(s[1]),d=t.weather[0].main,{description:p}=t.weather[0],{icon:u}=t.weather[0],{wind:m}=e.list[0],{pop:h}=e.list[0],{timezone:C}=e.city,g=(0,f.eJ)(e.city.sunrise,C),v=(0,f.eJ)(e.city.sunset,C),{humidity:A}=e.list[0].main,y=(0,f.Jn)(e.list[0].main.feels_like),{visibility:b}=e.list[0],w=e.list[0].rain,I=n.list[0].main.aqi,{pressure:$}=e.list[0].main;return{city:a,gps:i,temp:o,high:c,low:l,conditions:d,description:p,icon:u,wind:m,pop:h,sunrise:g,sunset:v,timezone:C,humidity:A,feelsLike:y,visibility:b,precip:w,airQuality:I,pressure:$}})(e,i);console.log(t),(()=>{console.log(b.children.length);for(let e=1;e<b.children.length;e+=0)console.log(b.children[0].nextElementSibling),F(b.children[0].nextElementSibling),b.removeChild(b.children[0].nextElementSibling)})();const r=(0,C.Z)(t,n);b.appendChild(r);const o=(0,g.Z)(t,n);b.appendChild(o);const s=(0,A.Z)(a,t,n);b.appendChild(s)})).catch((e=>console.log(e)))}else console.log(`Apologies! The site experienced an error: "${r.message}".`)}catch(e){alert("Apologies! The site experienced an error, check the log for details."),console.log(e)}}}})()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,